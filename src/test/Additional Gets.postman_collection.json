{
	"info": {
		"_postman_id": "aae4580e-e6e4-49bf-8a1e-15c6393e3090",
		"name": "Additional Gets",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34114328"
	},
	"item": [
		{
			"name": "Year - Average Use Case",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.to.have.status(200));\r",
							"});\r",
							"\r",
							"pm.test(\"Entries array is present and contains expected number of elements\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.entries).to.exist.and.to.be.an('array');\r",
							"  pm.expect(responseData.entries).to.have.lengthOf(10);\r",
							"});\r",
							"\r",
							"pm.test(\"Published year is equal to 2008 for all books\", function () {\r",
							"    const responseData = pm.response.json().entries;\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(book) {\r",
							"        pm.expect(book.publication).to.equal(2008);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/year/2008",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"year",
						"2008"
					]
				}
			},
			"response": []
		},
		{
			"name": "Year - No Pagination Information",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.to.have.status(200));\r",
							"});\r",
							"\r",
							"pm.test(\"Entries array is present and contains expected number of elements\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.entries).to.exist.and.to.be.an('array');\r",
							"  pm.expect(responseData.entries).to.have.lengthOf(10);\r",
							"});\r",
							"\r",
							"pm.test(\"Published year is equal to 2008 for all books\", function () {\r",
							"    const responseData = pm.response.json().entries;\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(book) {\r",
							"        pm.expect(book.publication).to.equal(2008);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/year/2008",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"year",
						"2008"
					]
				}
			},
			"response": []
		},
		{
			"name": "Year - NaN Offset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.to.have.status(400));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/year/2008?offset=a",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"year",
						"2008"
					],
					"query": [
						{
							"key": "offset",
							"value": "a"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Year - NaN Limit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.to.have.status(400));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/year/2008?limit=a",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"year",
						"2008"
					],
					"query": [
						{
							"key": "limit",
							"value": "a"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Year - NaN",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.to.have.status(400));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/year/a",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"year",
						"a"
					]
				}
			},
			"response": []
		},
		{
			"name": "Year - DNE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {\r",
							"  pm.expect(pm.response.to.have.status(404));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/year/1",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"year",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "ISBN - Average Use Case",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Book's isbn is 9780439023480\", function () {\r",
							"    var responseData = pm.response.json();\r",
							"    pm.expect(responseData.entry.isbn13).to.equal('9780439023480');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/isbn/9780439023480",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"isbn",
						"9780439023480"
					]
				}
			},
			"response": []
		},
		{
			"name": "ISBN - NaN",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(400);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/isbn/9780439023480A",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"isbn",
						"9780439023480A"
					]
				}
			},
			"response": []
		},
		{
			"name": "ISBN - DNE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/isbn/1",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"isbn",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Author - Average Use Case",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.to.have.status(200));\r",
							"});\r",
							"\r",
							"pm.test(\"Entries array is present and contains expected number of elements\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.entries).to.exist.and.to.be.an('array');\r",
							"  pm.expect(responseData.entries).to.have.lengthOf(10);\r",
							"});\r",
							"\r",
							"pm.test(\"Author contains 'Suzanne' for all books\", function () {\r",
							"    const responseData = pm.response.json().entries;\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(book) {\r",
							"        pm.expect(book.authors).to.contain(\"Suzanne\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/author/Suzanne?offset=0&limit=10",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"author",
						"Suzanne"
					],
					"query": [
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Author - No Pagination Information",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.to.have.status(200));\r",
							"});\r",
							"\r",
							"pm.test(\"Entries array is present and contains expected number of elements\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.entries).to.exist.and.to.be.an('array');\r",
							"  pm.expect(responseData.entries).to.have.lengthOf(10);\r",
							"});\r",
							"\r",
							"pm.test(\"Author contains 'Suzanne' for all books\", function () {\r",
							"    const responseData = pm.response.json().entries;\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(book) {\r",
							"        pm.expect(book.authors).to.contain(\"Suzanne\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/author/Suzanne",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"author",
						"Suzanne"
					]
				}
			},
			"response": []
		},
		{
			"name": "Author - NaN Offset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.to.have.status(400));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/author/Suzanne?offset=a",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"author",
						"Suzanne"
					],
					"query": [
						{
							"key": "offset",
							"value": "a"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Author - NaN Limit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.to.have.status(400));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/author/Suzanne?limit=a",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"author",
						"Suzanne"
					],
					"query": [
						{
							"key": "limit",
							"value": "a"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Author - DNE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {\r",
							"  pm.expect(pm.response.to.have.status(404));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/author/111111111111111111111111",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"author",
						"111111111111111111111111"
					]
				}
			},
			"response": []
		},
		{
			"name": "Title - Average Use Case",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.to.have.status(200));\r",
							"});\r",
							"\r",
							"pm.test(\"Entries array is present and contains expected number of elements\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.entries).to.exist.and.to.be.an('array');\r",
							"  pm.expect(responseData.entries).to.have.lengthOf(10);\r",
							"});\r",
							"\r",
							"pm.test(\"Title contains 'Hunger' for all books\", function () {\r",
							"    const responseData = pm.response.json().entries;\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(book) {\r",
							"        pm.expect(book.title).to.contain(\"Hunger\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Hunger\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:4000/books/title/?offset=0&limit=10",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"title",
						""
					],
					"query": [
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Title - No Pagination Information",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.to.have.status(200));\r",
							"});\r",
							"\r",
							"pm.test(\"Entries array is present and contains expected number of elements\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.entries).to.exist.and.to.be.an('array');\r",
							"  pm.expect(responseData.entries).to.have.lengthOf(10);\r",
							"});\r",
							"\r",
							"pm.test(\"Title contains 'Hunger' for all books\", function () {\r",
							"    const responseData = pm.response.json().entries;\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(book) {\r",
							"        pm.expect(book.title).to.contain(\"Hunger\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Hunger\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:4000/books/title/",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"title",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Title - NaN Offset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.to.have.status(400));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Hunger\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:4000/books/title/?offset=a&limit=10",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"title",
						""
					],
					"query": [
						{
							"key": "offset",
							"value": "a"
						},
						{
							"key": "limit",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Title - NaN Limit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.to.have.status(400));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Hunger\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:4000/books/title/?offset=1&limit=a",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"title",
						""
					],
					"query": [
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "a"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Title - DNE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {\r",
							"  pm.expect(pm.response.to.have.status(404));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"aaadaf1e13r1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:4000/books/title/?offset=0&limit=10",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"title",
						""
					],
					"query": [
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Title - No Title",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {\r",
							"  pm.expect(pm.response.to.have.status(404));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/title/",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"title",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "ID - Average Use Case",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Book's isbn is 9780439023480\", function () {\r",
							"    var responseData = pm.response.json();\r",
							"    pm.expect(responseData.entry.isbn13).to.equal('9780439023480');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/id/1",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"id",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "ID - NaN",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(400);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/id/a",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"id",
						"a"
					]
				}
			},
			"response": []
		},
		{
			"name": "ID - DNE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/id/0",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"id",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Rating - Average Use Case",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.to.have.status(200));\r",
							"});\r",
							"\r",
							"pm.test(\"All entries have an average rating between 3.5 - 4.5\", function() {\r",
							"  var responseData = pm.response.json();\r",
							"  responseData.entries.forEach(entry => {\r",
							"    pm.expect(parseFloat(entry.ratings.average)).to.be.within(3.5, 4.5, \"Rating within bounds (3.5 - 4.5)\");\r",
							"  });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/rating/4?offset=0&limit=1000",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"rating",
						"4"
					],
					"query": [
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Rating - No Pagination Information",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.to.have.status(200));\r",
							"});\r",
							"\r",
							"pm.test(\"All entries have an average rating between 3.5 - 4.5\", function() {\r",
							"  var responseData = pm.response.json();\r",
							"  responseData.entries.forEach(entry => {\r",
							"    pm.expect(parseFloat(entry.ratings.average)).to.be.within(3.5, 4.5, \"Rating within bounds (3.5 - 4.5)\");\r",
							"  });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/rating/4",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"rating",
						"4"
					],
					"query": [
						{
							"key": "offset",
							"value": "100",
							"disabled": true
						},
						{
							"key": "limit",
							"value": "100",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Rating - NaN Offset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.to.have.status(400));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/rating/4?offset=a",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"rating",
						"4"
					],
					"query": [
						{
							"key": "offset",
							"value": "a"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Rating - NaN Limit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.to.have.status(400));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/rating/4?limit=a",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"rating",
						"4"
					],
					"query": [
						{
							"key": "limit",
							"value": "a"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Rating - Invalid Rating NaN",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.to.have.status(400));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/rating/a",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"rating",
						"a"
					]
				}
			},
			"response": []
		},
		{
			"name": "Rating - Invalid Rating Out of Bounds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.to.have.status(400));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/rating/0",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"rating",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Min Rating - Average Use Case",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.to.have.status(200));\r",
							"});\r",
							"\r",
							"pm.test(\"All entries have an average rating above 4\", function() {\r",
							"  var responseData = pm.response.json();\r",
							"  responseData.entries.forEach(entry => {\r",
							"    pm.expect(parseFloat(entry.ratings.average)).to.be.at.least(4, \"Rating above 4\");\r",
							"  });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/minrating/4?offset=100&limit=100",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"minrating",
						"4"
					],
					"query": [
						{
							"key": "offset",
							"value": "100"
						},
						{
							"key": "limit",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Min Rating - No Pagination Information",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.to.have.status(200));\r",
							"});\r",
							"\r",
							"pm.test(\"All entries have an average rating above 4\", function() {\r",
							"  var responseData = pm.response.json();\r",
							"  responseData.entries.forEach(entry => {\r",
							"    pm.expect(parseFloat(entry.ratings.average)).to.be.at.least(4, \"Rating above 4\");\r",
							"  });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/minrating/4",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"minrating",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Min Rating - NaN Offset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.to.have.status(400));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/minrating/4?offset=a",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"minrating",
						"4"
					],
					"query": [
						{
							"key": "offset",
							"value": "a"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Min Rating - NaN Limit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.to.have.status(400));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/rating/4?limit=a",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"rating",
						"4"
					],
					"query": [
						{
							"key": "limit",
							"value": "a"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Min Rating - Invalid Rating NaN",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.to.have.status(400));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/minrating/a",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"minrating",
						"a"
					]
				}
			},
			"response": []
		},
		{
			"name": "Min Rating - Invalid Rating Out of Bounds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.to.have.status(400));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/minrating/0",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"minrating",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "All Books - Average Use Case",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.to.have.status(200));\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 100 entries\", function () {\r",
							"    pm.expect(pm.response.json().entries.length).to.equal(100);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/?offset=10&limit=100",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						""
					],
					"query": [
						{
							"key": "offset",
							"value": "10"
						},
						{
							"key": "limit",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "All Books - No Pagination Information",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.to.have.status(200));\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 10 entries\", function () {\r",
							"    pm.expect(pm.response.json().entries.length).to.equal(10);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "All Books - NaN Offset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.to.have.status(400));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/?offset=a",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						""
					],
					"query": [
						{
							"key": "offset",
							"value": "a"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "All Books - NaN Limit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.to.have.status(400));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/?limit=a",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						""
					],
					"query": [
						{
							"key": "limit",
							"value": "a"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "All Books - Negative Offset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.to.have.status(400));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/?offset=-1",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						""
					],
					"query": [
						{
							"key": "offset",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "All Books - Negative Limit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.to.have.status(400));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/books/?limit=-1",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						""
					],
					"query": [
						{
							"key": "limit",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		}
	]
}